#include <cstdlib>
#include <cstdio>
#include <iomanip>
#include <fstream>
#include <sstream>
#include <iostream>
#include <cmath>
#include <time.h> 
#include <sys/time.h> 
#include <sys/resource.h> 
#include <string.h>
#include <map>
#include <cassert>
#include <vector>
#include <limits>
# include "omp.h"

#include "../POSTPRO/cmdgks.h"
#include "../PROCESS/contacts.h"
#include "../PROCESS/contraintes.h"
#include "../PROCESS/correct.h"
#include "../PROCESS/inicoh.h"
#include "../PREPRO/init.h"
#include "../PREPRO/initc.h"
#include "../PREPRO/lectfic.h"
#include "../PROCESS/selco.h"
#include "../PROCESS/ftstring.h"
#include "../PROCESS/ctime.h"
#include "../PROCESS/rupture.h"
#include "../PROCESS/halo.h"
#include "../PROCESS/heatmass.h"
#include "../PROCESS/genesis.h"

#include "conf.h"

using namespace std;
typedef double R;

// Paramètres d'étude

const R Pi=3.14159265; //Nombre Pi
const R g=9.81;  //Constante de gravité

const R coord=7.5;  //Nombre de coordination
const R lmacro=0.1; //Dimension réelle du domaine d'étude

const R dens1=7.8e3;// Densité des particules
const R dens2=7.8e3;
const R coef1=1/0.64;
const R coef2=0.817093766;
//const R coef2=0.749566;
const R Cs=0.85*0.5;  //Coefficient de sécurité (pas de temps)

const int nmax=100000000000; //Nombre d'itérations limite

const int NBENREG=1000;
const int NB_THREADS=1;

const R lambda1=7.4;
const R lambda2=37.;
const R cp1=0.9; // Cp massique
const R cp2=0.9; // Cp massique
const R Tinit=25.;
const R Timp=35.;
const R Flimp=7.4;

const int SZHALO=8; //Taille halo

//////////////////////////////////////////////////////////////////////
///////// Début du programme principal
//////////////////////////////////////////////////////////////////////

int main(int argc, char *argv[])
{

R t1=CPUtime();
R t1p=omp_get_wtime () ;

// Parallélisation
omp_set_num_threads(NB_THREADS);

// Allocation
allocat_memory();

 cout<<endl;
 cout<<endl;
 cout<<"           < DEBUT PRE-PROCESS >"<<endl;
 cout<<"________________________________________________"<<endl;
 cout<<endl;

// Initialisation
read_sph(H_TOT,V_TOT,Z_TOT,H_POS,V_POS,Z_POS,NB_SPH, R_SPH, LIST_R, LIST_X, LIST_Y, LIST_Z, RMAX);
//read_phase_compo(H_TOT,V_TOT,Z_TOT,H_POS,V_POS,Z_POS,NB_SPH,LIST_X,LIST_Y,LIST_Z,LIST_P);

//gener3_cyl_alea(25,10.,3.,2., NB_SPH,LIST_X,LIST_Y,LIST_Z,LIST_P);
//gener3_cyl_alea_per(15,10.,3., NB_SPH,LIST_X,LIST_Y,LIST_Z,LIST_P);
//gener3_cyl_align(6,15.,1.,2., NB_SPH,LIST_X,LIST_Y,LIST_Z,LIST_P,2);
//gener3_cyl_align_per(6,15.,0.3, NB_SPH,LIST_X,LIST_Y,LIST_Z,LIST_P,2);
//gener3_sphere_alea(20,5,2,5,NB_SPH,LIST_X,LIST_Y,LIST_Z,LIST_P);
//gener3_sphere_alea_per(30,5,0,NB_SPH,LIST_X,LIST_Y,LIST_Z,LIST_P);
gener3_cyl_inf(10,5,2,5,NB_SPH,LIST_X,LIST_Y,LIST_Z,LIST_P,3);

// Allocation grille
allocat_grid(H_TOT,V_TOT,Z_TOT,RMAX,vecsizex,vecsizey, vecsizez, vecsize);

cout<<"Rayon par. moy/max :"<<R_SPH<<" - "<<RMAX<<endl;
init_sizeh(vecsizeh, vecsizexh,vecsizeyh,vecsizezh, coulh, numch, H_TOT, V_TOT, Z_TOT, RHALO,SZHALO,R_SPH);

// Init sph + Sélection des contacts 
initc_sph_halo2(coord,TYPCO,NBCO,CONT,NMAXCONT,Pi,dens1,dens2,epsi,vecsize,vecsizex,vecsizey,vecsizez,coul,nocoul,numc,nonumc,vecsizeh,vecsizexh,vecsizeyh,vecsizezh,coulh,PR_SPH,H_TOT,V_TOT,Z_TOT,H_POS,V_POS,Z_POS,NB_SPH,R_SPH,LIST_B,LIST_R,LIST_X,LIST_Y,LIST_Z,LIST_XO,LIST_YO,LIST_ZO,LIST_XA,LIST_YA,LIST_ZA,LIST_TX,LIST_TY,LIST_TZ,LIST_TXA,LIST_TYA,LIST_TZA,LIST_VX,LIST_VY,LIST_VZ,LIST_WX,LIST_WY,LIST_WZ,LIST_AX,LIST_AY,LIST_AZ,LIST_AWX,LIST_AWY,LIST_AWZ,LIST_C,LIST_H,LIST_M,LIST_I,FX,FY,FZ,MTX,MTY,MTZ,EDGE,EDGE1,EDGE2,EDGE3,EDGE4,EDGE5,EDGE6,NOCONT,NBCONTCO,LIST_P,LIST_V,LIST_IND,N1,N2,N3,N4,N5,N6,NMAXZ);

// Process
R t2=CPUtime();
R ti=0.;
int ite=1;

scale_sph2(Pi,H_TOT,V_TOT,Z_TOT,H_POS,V_POS,Z_POS,NB_SPH,R_SPH,RMAX,LIST_R,LIST_X,LIST_Y,LIST_Z,LIST_XO,LIST_YO,LIST_ZO,LIST_XA,LIST_YA,LIST_ZA,LIST_M,LIST_I,epsi,lmacro,dens1,dens2,LIST_P,LIST_V);
treat_halo2(LIST_P,NOHALO,NBHALO,RHALO,SZHALO,R_SPH,LIST_H,vecsizeh,vecsizexh,vecsizeyh,vecsizezh,coulh,numch,LIST_R,LIST_X,LIST_Y,LIST_Z,NB_SPH,LIST_V,VOLHALO,coef1,NMAXHALO);

init_sphT(NB_SPH,Tinit,Timp,LIST_TEMP,EDGE1,EDGE2,EDGE3,EDGE4,EDGE5,EDGE6,NCONT,NBCO,CONT,LIST_X,LIST_Y,LIST_Z,DCONTO,DeltaT,3,1);

dt=crit_time2(coord,NBCO,lambda1,lambda2,cp1,cp2,dens1,dens2,DCONTO,Cs);

ExpVISUT(ite,dt,NB_SPH,H_TOT,V_TOT,Z_TOT,LIST_X,LIST_Y,LIST_Z,LIST_R,LIST_TEMP,maxt,mint,EDGE,minfx,maxfx,minfy,maxfy,minfz,maxfz,LIST_FLX,LIST_FLY,LIST_FLZ,LIST_P,1);

 cout<<"Pas de temps de calcul           = "<<dt<<endl;   
 cout<<"Fraction volumique               = "<<PR_SPH<<endl;
 cout<<"Eps                              = "<<epsi<<endl;
 cout<<"Nombre de grilles                = "<<vecsizex*vecsizey*vecsizez<<endl;  	  
 cout<<"Nombre de contacts total         = "<<NBCO<<endl; 
 cout<<"Nombre de coordination           = "<<coord<<endl; 
 cout<<"________________________________________________"<<endl; 

 cout<<endl;
 cout<<endl;
 cout<<"             < DEBUT PROCESS >  "<<endl;
 cout<<"________________________________________________"<<endl; 
 cout<<endl;



while(ite<nmax)
     {

      temp2(coef2,NB_SPH,NBCO,dt,Flimp,lambda1,lambda2,cp1,cp2,coef1,CONT,LIST_M,LIST_R,LIST_TEMP,EDGE, EDGE1, EDGE2, EDGE3,EDGE4,EDGE5,EDGE6,mint,maxt,DCONTO,LIST_IND,LIST_P,N1,N2,N3,N4,N5,N6,DeltaT,3,1); 

      if(ite%NBENREG==0)
       {

        R t2p=omp_get_wtime () - t1p; 
 
        R  pcpuj=t2p/(24.*3600);
        int pnjcpu=int(pcpuj);
        R pcpuh=(pcpuj-pnjcpu)*24;
        int pnhcpu=int(pcpuh);
        R pcpum=(pcpuh-pnhcpu)*60.;
        int pnmcpu=int(pcpum);
        R pcpus=(pcpum-pnmcpu)*60.;
        int pnscpu=int(pcpus);                
 
        cout<<endl;
        cout<<"Pas:"<<ite<<"         PART:        "<<pnjcpu<<"j"<<" "<<pnhcpu<<"h"<<" "<<pnmcpu<<"mn"<<" "<<pnscpu<<"s"<<endl;

	flux2(coef2,NB_SPH,NBCO,dt,lambda1,lambda2,coef1,CONT,NCONT,LIST_M,LIST_R,LIST_TEMP,EDGE,minfx,maxfx,minfy,maxfy,minfz,maxfz,DCONTO,LIST_P,H_TOT, V_TOT,Z_TOT,LIST_FLX,LIST_FLY,LIST_FLZ,NBHALO,NOHALO,NBCONTCO,NOCONT,VOLHALO,LIST_V);

        cout<<"min/max t:"<<mint<<"  "<<maxt<<endl;
        cout<<"min/max fz:"<<minfz<<"  "<<maxfz<<endl;
     
	cout<<"________________________________________________"<<endl; 
	cout<<endl;

      ExpVISUT(ite,dt,NB_SPH,H_TOT,V_TOT,Z_TOT,LIST_X,LIST_Y,LIST_Z,LIST_R,LIST_TEMP,maxt,mint,EDGE,minfx,maxfx,minfy,maxfy,minfz,maxfz,LIST_FLX,LIST_FLY,LIST_FLZ,LIST_P,0);
      }

     ite++;
     ti+=dt;
    }

t2=CPUtime()-t1;
R t2p=omp_get_wtime () - t1p; 
cout<<"Iterations total number :"<<ite<<endl;


// Libération de la mémoire	
//free_memory();
cout<<"Process CPU time :"<<t2<<endl;
cout<<"Total CPU time :"<<CPUtime()-t1<<endl;
cout<<"Total Par. time :"<<omp_get_wtime () - t1p<<endl;

}

