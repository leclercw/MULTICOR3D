#ifndef __INIT__
#define __INIT__

using namespace std;

typedef double R;

void init_paroi(int NB_PAR, R densp, R epaisp, R ** LIST_PX, R ** LIST_PY, R ** LIST_PZ, R ** LIST_PVX, R ** LIST_PVY, R ** LIST_PVZ, R ** LIST_PAX, R ** LIST_PAY, R ** LIST_PAZ, R ** LIST_PN, R * LIST_PM);
void init_size(int & vecsize, int & vecsizex,int & vecsizey, int & vecsizez, vector< vector<int>  > & coul,vector< vector<int>  > & numc, R H_TOT, R V_TOT, R Z_TOT, int NB_SPH, R R_SPH, R RMAX);
void init_sizeh(int & vecsizeh, int & vecsizexh,int & vecsizeyh, int & vecsizezh, vector< vector<int>  > & coulh,vector< vector<int>  > & numch, R H_TOT, R V_TOT, R Z_TOT, R RHALO);
void init_sph(bool * TYPCO, int NBCONT,R Pi, R dens, R epsi, int vecsizex, int vecsizey, int vecsizez, vector< vector<int>  > & coul,R & PR_SPH, R H_TOT, R V_TOT, R Z_TOT, int NB_SPH, R R_SPH, int * LIST_B, R * LIST_R, R * LIST_X, R * LIST_Y, R * LIST_Z, R * LIST_XO, R * LIST_YO, R * LIST_ZO, R * LIST_XA, R * LIST_YA, R * LIST_ZA, R * LIST_TX, R * LIST_TY, R * LIST_TZ,R * LIST_TXA, R * LIST_TYA, R * LIST_TZA, R * LIST_VX, R * LIST_VY, R * LIST_VZ, R * LIST_WX, R * LIST_WY, R * LIST_WZ, R * LIST_AX, R * LIST_AY, R * LIST_AZ, R * LIST_AWX, R * LIST_AWY, R * LIST_AWZ, int * LIST_C, R * LIST_M, R * LIST_I, R * FX, R * FY, R * FZ, R * MTX, R * MTY, R * MTZ, bool * EDGE,bool * EDGE1, bool * EDGE2, bool * EDGE3, bool * EDGE4,  bool * EDGE5, bool * EDGE6, int * NBCONTCO);
void init_sphp(bool * TYPCO, int NBCONT,R Pi, R dens, R epsi, int vecsizex, int vecsizey, int vecsizez, vector< vector<int>  > & coul,R & PR_SPH, R H_TOT, R V_TOT, R Z_TOT, int NB_SPH, R R_SPH,int * LIST_B, R * LIST_R, R * LIST_X, R * LIST_Y, R * LIST_Z, R * LIST_XO, R * LIST_YO, R * LIST_ZO, R * LIST_XA, R * LIST_YA, R * LIST_ZA, R * LIST_TX, R * LIST_TY, R * LIST_TZ,R * LIST_TXA, R * LIST_TYA, R * LIST_TZA, R * LIST_VX, R * LIST_VY, R * LIST_VZ, R * LIST_WX, R * LIST_WY, R * LIST_WZ, R * LIST_AX, R * LIST_AY, R * LIST_AZ, R * LIST_AWX, R * LIST_AWY, R * LIST_AWZ, int * LIST_C, R * LIST_M, R * LIST_I, R * FX, R * FY, R * FZ, R * MTX, R * MTY, R * MTZ, bool * EDGE,bool * EDGE1, bool * EDGE2, bool * EDGE3, bool * EDGE4,  bool * EDGE5, bool * EDGE6, int * NBCONTCO);
void init_sph_ind(bool * TYPCO, int NBCONT, R Pi, R dens, R epsi, int vecsizex, int vecsizey, int vecsizez,vector< vector<int>  > & coul, R & PR_SPH, R H_TOT, R V_TOT, R Z_TOT, int NB_SPH, R R_SPH, int * LIST_B, R * LIST_R, R * LIST_X, R * LIST_Y, R * LIST_Z, R * LIST_XO, R * LIST_YO, R * LIST_ZO,R * LIST_XA, R * LIST_YA, R * LIST_ZA, R * LIST_TX, R * LIST_TY, R * LIST_TZ,R * LIST_TXA, R * LIST_TYA, R * LIST_TZA, R * LIST_VX, R * LIST_VY, R * LIST_VZ, R * LIST_WX, R * LIST_WY, R * LIST_WZ, R * LIST_AX, R * LIST_AY, R * LIST_AZ, R * LIST_AWX, R * LIST_AWY, R * LIST_AWZ, int * LIST_C, R * LIST_M, R * LIST_I, R * FX, R * FY, R * FZ, R * MTX, R * MTY, R * MTZ, bool * EDGE, bool * EDGE1, bool * EDGE2, bool * EDGE3, bool * EDGE4,  bool * EDGE5, bool * EDGE6, int * NBCONTCO);
void init_sphp_ind(bool * TYPCO, int NBCONT, R Pi, R dens, R epsi, int vecsizex, int vecsizey, int vecsizez,vector< vector<int>  > & coul, R & PR_SPH, R H_TOT, R V_TOT, R Z_TOT, int NB_SPH, R R_SPH, int * LIST_B, R * LIST_R, R * LIST_X, R * LIST_Y, R * LIST_Z, R * LIST_XO, R * LIST_YO, R * LIST_ZO,R * LIST_XA, R * LIST_YA, R * LIST_ZA, R * LIST_TX, R * LIST_TY, R * LIST_TZ,R * LIST_TXA, R * LIST_TYA, R * LIST_TZA, R * LIST_VX, R * LIST_VY, R * LIST_VZ, R * LIST_WX, R * LIST_WY, R * LIST_WZ, R * LIST_AX, R * LIST_AY, R * LIST_AZ, R * LIST_AWX, R * LIST_AWY, R * LIST_AWZ, int * LIST_C, R * LIST_M, R * LIST_I, R * FX, R * FY, R * FZ, R * MTX, R * MTY, R * MTZ, bool * EDGE, bool * EDGE1, bool * EDGE2, bool * EDGE3, bool * EDGE4,  bool * EDGE5, bool * EDGE6, int * NBCONTCO);
void init_sph_halo(bool * TYPCO, int NBCONT, R Pi, R dens, R epsi, int vecsizex, int vecsizey, int vecsizez,vector< vector<int>  > & coul,int vecsizexh, int vecsizeyh, int vecsizezh,vector< vector<int>  > & coulh, R & PR_SPH, R H_TOT, R V_TOT, R Z_TOT, int NB_SPH, R R_SPH, int * LIST_B, R * LIST_R, R * LIST_X, R * LIST_Y, R * LIST_Z, R * LIST_XO, R * LIST_YO, R * LIST_ZO,R * LIST_XA, R * LIST_YA, R * LIST_ZA, R * LIST_TX, R * LIST_TY, R * LIST_TZ, R * LIST_TXA, R * LIST_TYA, R * LIST_TZA, R * LIST_VX, R * LIST_VY, R * LIST_VZ, R * LIST_WX, R * LIST_WY, R * LIST_WZ, R * LIST_AX, R * LIST_AY, R * LIST_AZ, R * LIST_AWX, R * LIST_AWY, R * LIST_AWZ, int * LIST_C, int * LIST_H, R * LIST_M, R * LIST_I, R * FX, R * FY, R * FZ, R * MTX, R * MTY, R * MTZ, bool * EDGE, bool * EDGE1, bool * EDGE2, bool * EDGE3, bool * EDGE4,  bool * EDGE5, bool * EDGE6, int * NBCONTCO);
void init_sphp_halo(bool * TYPCO, int NBCONT, R Pi, R dens, R epsi, int vecsizex, int vecsizey, int vecsizez,vector< vector<int>  > & coul,int vecsizexh, int vecsizeyh, int vecsizezh,vector< vector<int>  > & coulh, R & PR_SPH, R H_TOT, R V_TOT, R Z_TOT, int NB_SPH, R R_SPH, int * LIST_B, R * LIST_R, R * LIST_X, R * LIST_Y, R * LIST_Z, R * LIST_XO, R * LIST_YO, R * LIST_ZO,R * LIST_XA, R * LIST_YA, R * LIST_ZA, R * LIST_TX, R * LIST_TY, R * LIST_TZ, R * LIST_TXA, R * LIST_TYA, R * LIST_TZA,R * LIST_VX, R * LIST_VY, R * LIST_VZ, R * LIST_WX, R * LIST_WY, R * LIST_WZ, R * LIST_AX, R * LIST_AY, R * LIST_AZ, R * LIST_AWX, R * LIST_AWY, R * LIST_AWZ, int * LIST_C, int * LIST_H, R * LIST_M, R * LIST_I, R * FX, R * FY, R * FZ, R * MTX, R * MTY, R * MTZ, bool * EDGE, bool * EDGE1, bool * EDGE2, bool * EDGE3, bool * EDGE4,  bool * EDGE5, bool * EDGE6, int * NBCONTCO);
void init_sphp_halo_car(R EE, bool * TYPCO, int NBCONT, R Pi, R dens, R epsi, int vecsizex, int vecsizey, int vecsizez,vector< vector<int>  > & coul,int vecsizexh, int vecsizeyh, int vecsizezh,vector< vector<int>  > & coulh, R & PR_SPH, R H_TOT, R V_TOT, R Z_TOT, int NB_SPH, R R_SPH, int * LIST_B, R * LIST_R, R * LIST_X, R * LIST_Y, R * LIST_Z, R * LIST_XO, R * LIST_YO, R * LIST_ZO, R * LIST_XA, R * LIST_YA, R * LIST_ZA,R * LIST_TX, R * LIST_TY, R * LIST_TZ, R * LIST_TXA, R * LIST_TYA, R * LIST_TZA,R * LIST_VX, R * LIST_VY, R * LIST_VZ, R * LIST_WX, R * LIST_WY, R * LIST_WZ, R * LIST_AX, R * LIST_AY, R * LIST_AZ, R * LIST_AWX, R * LIST_AWY, R * LIST_AWZ, int * LIST_C, int * LIST_H, R * LIST_M, R * LIST_I, R * FX, R * FY, R * FZ, R * MTX, R * MTY, R * MTZ, bool * EDGE, bool * EDGE1, bool * EDGE2, bool * EDGE3, bool * EDGE4,  bool * EDGE5, bool * EDGE6, int * NBCONTCO);
void reinit_sphp(R epsi, R H_TOT, R V_TOT, R Z_TOT, int NB_SPH, R * LIST_R, R * LIST_X, R * LIST_Y, R * LIST_Z, R * LIST_XO, R * LIST_YO, R * LIST_ZO, R * LIST_TX, R * LIST_TY, R * LIST_TZ, R * LIST_VX, R * LIST_VY, R * LIST_VZ, R * LIST_WX, R * LIST_WY, R * LIST_WZ, R * LIST_AX, R * LIST_AY, R * LIST_AZ, R * LIST_AWX, R * LIST_AWY, R * LIST_AWZ, bool * EDGE, bool * EDGE1, bool * EDGE2, bool * EDGE3, bool * EDGE4,  bool * EDGE5, bool * EDGE6, R posparoi);
void init_sph2(bool * TYPCO, int NBCONT,R Pi, R dens1, R dens2, R epsi, int vecsizex, int vecsizey, int vecsizez,vector< vector<int>  > & coul, R & PR_SPH, R H_TOT, R V_TOT, R Z_TOT, int NB_SPH, R R_SPH,int * LIST_B, R * LIST_R, R * LIST_X, R * LIST_Y, R * LIST_Z, R * LIST_XO, R * LIST_YO, R * LIST_ZO, R * LIST_XA, R * LIST_YA, R * LIST_ZA,  R * LIST_TX, R * LIST_TY, R * LIST_TZ,R * LIST_TXA, R * LIST_TYA, R * LIST_TZA, R * LIST_VX, R * LIST_VY, R * LIST_VZ, R * LIST_WX, R * LIST_WY, R * LIST_WZ, R * LIST_AX, R * LIST_AY, R * LIST_AZ, R * LIST_AWX, R * LIST_AWY, R * LIST_AWZ, int * LIST_C, R * LIST_M, R * LIST_I, R * FX, R * FY, R * FZ, R * MTX, R * MTY, R * MTZ, bool * EDGE,bool * EDGE1, bool * EDGE2, bool * EDGE3, bool * EDGE4,  bool * EDGE5, bool * EDGE6, int * NBCONTCO, bool * LIST_P);
void scale_paroi(int NB_PAR, R ** LIST_PX, R ** LIST_PY, R ** LIST_PZ, R * LIST_PM, int NBCOP, R * DCONTP,  R & epaisp, R H_TOT2, R lmacro);
void scale_sph(R Pi, R & H_TOT, R & V_TOT, R & Z_TOT, int & NB_SPH, R & R_SPH, R & RMAX, R * LIST_R, R * LIST_X, R * LIST_Y, R * LIST_Z, R * LIST_XO, R * LIST_YO, R * LIST_ZO,R * LIST_XA, R * LIST_YA, R * LIST_ZA, R * LIST_M, R * LIST_I, R & epsi, R lmacro, R dens);
void scale_sphp(R Pi, R & H_TOT, R & V_TOT, R & Z_TOT, int & NB_SPH, R & R_SPH, R & RMAX, R * LIST_R, R * LIST_X, R * LIST_Y, R * LIST_Z, R * LIST_XO, R * LIST_YO, R * LIST_ZO,R * LIST_XA, R * LIST_YA, R * LIST_ZA, R * LIST_M, R * LIST_I, R & epsi, R lmacro, R dens);
void scale_sph_ind(R Pi, R & H_TOT, R & V_TOT, R & Z_TOT, int & NB_SPH, R & R_SPH, R & RMAX, R * LIST_R, R * LIST_X, R * LIST_Y, R * LIST_Z, R * LIST_XO, R * LIST_YO, R * LIST_ZO,R * LIST_XA, R * LIST_YA, R * LIST_ZA, R * LIST_M, R * LIST_I, R & epsi, R lmacro, R dens, R rind);
void scale_sph2(R Pi, R & H_TOT, R & V_TOT, R & Z_TOT, int & NB_SPH, R & R_SPH, R & RMAX, R * LIST_R, R * LIST_X, R * LIST_Y, R * LIST_Z, R * LIST_XO, R * LIST_YO, R * LIST_ZO, R * LIST_XA, R * LIST_YA, R * LIST_ZA, R * LIST_M, R * LIST_I, R & epsi, R lmacro, R dens1, R dens2, bool * LIST_P);
void init_verv(int NB_VER,int NX,int NY,int NZ,int NB_SPH,int H_TOT,int V_TOT,int Z_TOT,R * LIST_X,R *LIST_Y,R *LIST_Z,int ** NOSPHV,int * NSPHV, int * INDVER);
void init_ver_tet4(int NB_NOVER, int NB_VER, int NB_SPH, R ** NOEUD, int ** TET4, R * VOLT, R * LIST_X, R * LIST_Y, R * LIST_Z, int ** NOSPHV, int * NSPHV, int * INDVER);
void init_ver_pri6(int NB_NOVER, int NB_VER, int NB_SPH, R ** NOEUD, int ** PRI6, R * VOLT, R * LIST_X, R * LIST_Y, R * LIST_Z, int ** NOSPHV, int * NSPHV, int * INDVER);
#endif
